<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://diogoalexandreoliveiradasilva.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://diogoalexandreoliveiradasilva.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-30T19:07:37+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">CPUsage - ISITDU 2024</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2024/CPUsage/" rel="alternate" type="text/html" title="CPUsage - ISITDU 2024"/><published>2024-10-30T18:25:40+00:00</published><updated>2024-10-30T18:25:40+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2024/CPUsage</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2024/CPUsage/"><![CDATA[<h1 id="cpusage">CPUsage</h1> <p><strong>Author:</strong> p4pa<br/> <strong>Team:</strong> xSTF</p> <h2 id="info">INFO</h2> <ul> <li><strong>CTF:</strong> ISITDU 2024</li> <li><strong>Challenge:</strong> CPUsage</li> <li><strong>Category:</strong> Forensics</li> <li><strong>Description:</strong> My friend noticed high CPU usage after opening his laptop. I took a memory dump of his laptop and need you to investigate it. <ol> <li>What is the name of the malicious process, the full path of the process, and the parent process ID?</li> <li>What is the IP that the process communicates with, and the family name of the malware?</li> </ol> </li> </ul> <h2 id="writeup">WriteUP</h2> <h3 id="memory-dump">Memory Dump</h3> <ul> <li>This was my first <strong>Forensics</strong> CTF, and the description called for investigating a <strong>memory dump</strong>. The first step was selecting a tool suited to this context. <ul> <li>I found this GitHub repository that enumerates great <strong>memory forensics tools</strong>: <ul> <li><a href="https://github.com/digitalisx/awesome-memory-forensics">Awesome Memory Forensics</a></li> </ul> </li> <li>The tool that best suited the challenge was <strong>Volatility3</strong>, a robust framework for memory analysis. <ul> <li><a href="https://github.com/volatilityfoundation/volatility3">Volatility3</a></li> </ul> </li> </ul> </li> <li>With Volatility3 selected, I began analyzing the memory dump.</li> </ul> <h3 id="processes">Processes</h3> <ul> <li>I referred to <strong>Volatility3’s</strong> documentation and determined that examining the <strong>process list</strong> for anomalies would be a key initial step. I found <code class="language-plaintext highlighter-rouge">psscan</code> particularly helpful, as it organizes processes by <strong>hierarchy</strong> (showing parent-child relationships). <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw windows.psscan <span class="o">&gt;</span> psscan.txt
</code></pre></div> </div> </li> <li>The output columns included essential process details: <ol> <li><code class="language-plaintext highlighter-rouge">PID</code>: Process ID</li> <li><code class="language-plaintext highlighter-rouge">PPID</code>: Parent Process ID</li> <li><code class="language-plaintext highlighter-rouge">ImageFileName</code>: Name of the executable file</li> <li><code class="language-plaintext highlighter-rouge">Offset(V)</code>: Virtual offset</li> <li><code class="language-plaintext highlighter-rouge">Threads</code>: Number of threads</li> <li><code class="language-plaintext highlighter-rouge">Handles</code>: Number of handles</li> <li><code class="language-plaintext highlighter-rouge">SessionId</code>: Session ID</li> <li><code class="language-plaintext highlighter-rouge">Wow64</code>: Indicates if the process is running under WOW64</li> <li><code class="language-plaintext highlighter-rouge">CreateTime</code>: Process creation time</li> <li><code class="language-plaintext highlighter-rouge">ExitTime</code>: Process exit time</li> <li><code class="language-plaintext highlighter-rouge">Audit</code>: Audit information</li> <li><code class="language-plaintext highlighter-rouge">Cmd</code>: Command line</li> <li><code class="language-plaintext highlighter-rouge">Path</code>: Full path of the executable file</li> </ol> </li> <li>One <strong>process</strong> stood out: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">***</span> 2220	264	dlIhost.exe	0xb50e42a43080	9	-	0	False	2024-08-22 11:57:21.000000 	N/A	<span class="se">\D</span>evice<span class="se">\H</span>arddiskVolume3<span class="se">\U</span>sers<span class="se">\m</span>4shl3<span class="se">\A</span>ppData<span class="se">\R</span>oaming<span class="se">\D</span>LL<span class="se">\d</span>lIhost.exe	-	-
</code></pre></div> </div> </li> <li>This process raised suspicions for several reasons: <ul> <li><strong>Location</strong>: System processes are rarely located in <code class="language-plaintext highlighter-rouge">AppData\Roaming</code>.</li> <li><strong>Naming</strong>: Windows uses <code class="language-plaintext highlighter-rouge">dllhost.exe</code> as a legitimate system process, but here it was slightly altered to <strong>dlIhost.exe</strong> (substituting an ‘I’ for ‘l’).</li> </ul> </li> <li>This subtle change suggested the process might be <strong>malicious</strong>, using a near-identical name to evade detection.</li> </ul> <h3 id="malware">Malware</h3> <ul> <li>Next, I checked for <strong>memory regions</strong> with potentially <strong>injected code</strong> using Volatility3’s <code class="language-plaintext highlighter-rouge">malfind</code> command. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw windows.malfind <span class="o">&gt;</span> malfind
</code></pre></div> </div> </li> <li>The output validated my hypothesis: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  2220	dlIhost.exe	0x203f2b00000	0x203f2b1ffff	VadS	PAGE_EXECUTE_READWRITE	32	1 Disabled	N/A	
</code></pre></div> </div> </li> <li>The <strong>dlIhost.exe process had injected code</strong>, confirming it as potentially malicious. Notable flags included: <ul> <li><strong>PAGE_EXECUTE_READWRITE</strong>: This memory protection allows the memory region to be read, written, and executed—ideal for malware looking to execute malicious code within an unsuspecting process’s memory space.</li> </ul> </li> </ul> <h3 id="network">Network</h3> <ul> <li>With <code class="language-plaintext highlighter-rouge">dlIhost.exe</code> confirmed as suspicious, I examined <strong>network activity</strong> to identify potential connections to external IPs. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw windows.netscan <span class="o">&gt;</span> netscan
</code></pre></div> </div> </li> <li>The output columns provided details on network connections: <ol> <li><code class="language-plaintext highlighter-rouge">Offset</code>: Memory offset</li> <li><code class="language-plaintext highlighter-rouge">Proto</code>: Protocol used (e.g., TCP, UDP)</li> <li><code class="language-plaintext highlighter-rouge">LocalAddr</code>: Local IP address</li> <li><code class="language-plaintext highlighter-rouge">LocalPort</code>: Local port number</li> <li><code class="language-plaintext highlighter-rouge">ForeignAddr</code>: Remote IP address</li> <li><code class="language-plaintext highlighter-rouge">ForeignPort</code>: Remote port number</li> <li><code class="language-plaintext highlighter-rouge">State</code>: Connection state (e.g., ESTABLISHED, LISTENING)</li> <li><code class="language-plaintext highlighter-rouge">PID</code>: Process ID</li> <li><code class="language-plaintext highlighter-rouge">Owner</code>: Owner of the process</li> <li><code class="language-plaintext highlighter-rouge">Created</code>: Creation time of the connection</li> </ol> </li> <li>Our target process had an <strong>active connection</strong> with the following entry: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  0xb50e40f53260	TCPv4	192.168.253.128	49720	45.77.240.51	6198	ESTABLISHED	2220	dlIhost.exe	2024-08-22 11:58:04.000000 
</code></pre></div> </div> </li> <li>This showed <strong>dlIhost.exe</strong> communicating with <strong>45.77.240.51</strong>. <ul> <li>I conducted <strong>OSINT</strong> on this IP through <a href="https://www.virustotal.com/gui/ip-address/45.77.240.51">VIRUS TOTAL</a>, which flagged it as associated with known malware activity, further confirming this process as malicious.</li> </ul> </li> </ul> <h3 id="dumping">Dumping</h3> <ul> <li>To confirm the <strong>malware family</strong>, I decided to dump <strong>dlIhost.exe</strong> using Volatility3’s <code class="language-plaintext highlighter-rouge">dumpfiles</code> command. This captures the <strong>.dll</strong> and <strong>.exe</strong> files associated with the process. <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  vol <span class="nt">-f</span> win10.raw <span class="nt">-o</span> ./dump windows.dumpfiles <span class="nt">--pid</span> 2220
</code></pre></div> </div> </li> <li>With the file dumped, I uploaded it to <a href="https://www.virustotal.com/">VIRUS TOTAL</a> for analysis. Virus Total categorized it as <strong>harminer</strong>: <ul> <li><strong>Harminer</strong>: A Trojan commonly used as a <strong>cryptocurrency miner</strong> to mine Monero (XMR) on infected systems.</li> </ul> </li> </ul> <h3 id="solution">Solution</h3> <ul> <li><strong>Answers based on the information gathered</strong>: <ol> <li> <p><strong>Name of the malicious process:</strong> dlIhost.exe<br/> <strong>Full path of the process:</strong> <code class="language-plaintext highlighter-rouge">C:\Users\m4shl3\AppData\Roaming\DLL\dlIhost.exe</code><br/> <strong>Parent process ID:</strong> 264</p> </li> <li> <p><strong>IP that the process communicates with:</strong> 45.77.240.51<br/> <strong>Family name of the malware:</strong> harminer</p> </li> </ol> <ul> <li><strong>Flag format:</strong> ISITDTU{processName-FullPath-ID_ip-FamilyName}</li> </ul> </li> <li><strong>Flag:</strong> <code class="language-plaintext highlighter-rouge">ISITDTU{dlIhost.exe-C:\Users\m4shl3\AppData\Roaming\DLL\dlIhost.exe-264_45.77.240.51-harminer}</code></li> </ul>]]></content><author><name></name></author><category term="ctf"/><category term="forensics"/><summary type="html"><![CDATA[Writeup for a forensics CTF in ISITDU 2024]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://diogoalexandreoliveiradasilva.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://diogoalexandreoliveiradasilva.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://diogoalexandreoliveiradasilva.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>